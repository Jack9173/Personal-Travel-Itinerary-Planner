# -*- coding: utf-8 -*-
"""code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vxrL27HLpiz57gR3ecrQL-SAuQg55aDv
"""

import gradio as gr
from typing import TypedDict, Annotated, List
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_groq import ChatGroq

# ---------- State Definition ----------
class PlannerState(TypedDict):
    messages: Annotated[List[HumanMessage | AIMessage], "conversation messages"]
    city: str
    interests: List[str]
    days: int
    budget: str
    itinerary: str

# ---------- LLM Setup ----------
llm = ChatGroq(
    temperature=0,
    groq_api_key=" ",  # Replace with env var in production
    model_name="llama-3.3-70b-versatile"
)

# ---------- Prompt ----------
itinerary_prompt = ChatPromptTemplate.from_messages([
    ("system",
     "You are a professional travel assistant. "
     "Create a detailed {days}-day itinerary for {city}, considering the user's interests: {interests}. "
     "Adapt the plan based on the budget: {budget}. "
     "Provide day-wise sections (Day 1, Day 2, etc.) with activities for morning, afternoon, and evening. "
     "Include food recommendations where relevant. "
     "Keep it clear, structured, and engaging."
     ),
    ("human", "Create my personalized itinerary.")
])

# ---------- Core Function ----------
def create_itinerary(city: str, interests: str, days: int, budget: str):
    state = {
        "messages": [],
        "city": city,
        "interests": [interest.strip() for interest in interests.split(",")],
        "days": days,
        "budget": budget,
        "itinerary": "",
    }

    response = llm.invoke(
        itinerary_prompt.format_prompt(
            city=state["city"],
            interests=", ".join(state["interests"]),
            days=state["days"],
            budget=state["budget"]
        )
    )

    state["messages"].append(AIMessage(content=response.content))
    state["itinerary"] = response.content
    return state["itinerary"]

# ---------- UI Layout ----------
with gr.Blocks(theme=gr.themes.Soft(primary_hue="orange", secondary_hue="green")) as demo:
    with gr.Row():
        with gr.Column():
            gr.Markdown(
                """
                # 🗺️ Travel Itinerary Planner
                Plan your perfect **multi-day trip** with AI ✨
                Just enter your destination, travel style, and let the planner create a personalized itinerary for you.
                """
            )

    with gr.Row():
        with gr.Column(scale=1, min_width=350):
            city_input = gr.Textbox(
                label="🌆 Destination City",
                placeholder="e.g., Paris, Tokyo, New York",
                lines=1
            )
            interests_input = gr.Textbox(
                label="🎯 Your Interests",
                placeholder="e.g., museums, street food, history",
                lines=1
            )
            days_input = gr.Slider(
                label="🗓️ Trip Duration (Days)",
                minimum=1,
                maximum=14,
                value=3,
                step=1
            )
            budget_input = gr.Dropdown(
                label="💰 Budget Preference",
                choices=["Low", "Medium", "Luxury"],
                value="Medium"
            )

            generate_btn = gr.Button("✨ Generate Itinerary", variant="primary")

        with gr.Column(scale=2, min_width=450):
            output_box = gr.Markdown(
                label="📌 Suggested Itinerary",
                elem_classes="itinerary-box"
            )

    # Button action
    generate_btn.click(
        fn=create_itinerary,
        inputs=[city_input, interests_input, days_input, budget_input],
        outputs=output_box
    )

# ---------- Launch ----------
if __name__ == "__main__":
    demo.launch()

